package org.example

// Workshop #1: Simple Console Application - Unit Converter

fun main() {
    // 2. ‡πÉ‡∏ä‡πâ while (true) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏ô‡∏ã‡πâ‡∏≥
    while (true) {
        // 1. ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        println("===== Unit Converter =====")
        println("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á:")
        println("1. Celsius to Fahrenheit")
        println("2. Kilometers to Miles")
        println("‡∏û‡∏¥‡∏°‡∏û‡πå 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        print("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π (1, 2, or exit): ")

        // 2. ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        val choice = readln()

        // 3. ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ when expression
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á Celsius ‡πÄ‡∏õ‡πá‡∏ô Fahrenheit: convertCelsiusToFahrenheit()
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á Kilometers ‡πÄ‡∏õ‡πá‡∏ô Miles: convertKilometersToMiles()
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        // üö®
        when (choice.lowercase()) {
            "1"    -> convertCelsiusToFahrenheit()
            "2"    -> convertKilometersToMiles()
            "exit" -> {
                println("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡πà‡∏∞ üëã")
                break
            }
            else   -> println("‚ö†Ô∏è  ‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        }

        println() // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    }
}

// 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢ Celsius to Fahrenheit: celsiusToFahrenheit
// ‡∏™‡∏π‡∏ï‡∏£ celsius * 9.0 / 5.0 + 32
// üö®
fun celsiusToFahrenheit(celsius: Double): Double {
    return celsius * 9.0 / 5.0 + 32
}

// 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢ Kilometers to Miles: kilometersToMiles
// ‡∏™‡∏π‡∏ï‡∏£ kilometers * 0.621371
// üö®
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢

fun kilometersToMiles(km: Double): Double {
    return km * 0.621371
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á Celsius to Fahrenheit ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// --- ‡πÅ‡∏õ‡∏•‡∏á Celsius ‚ûî Fahrenheit ---
fun convertCelsiusToFahrenheit() {
    print("‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ ¬∞C: ")
    val celsius = readln().toDoubleOrNull() ?: run {
        println("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        return
    }
    val result = celsiusToFahrenheit(celsius)
    println("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: $celsius ¬∞C = ${"%.2f".format(result)} ¬∞F")
}
// 5. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Null Safety ‡∏î‡πâ‡∏ß‡∏¢ toDoubleOrNull() ‡πÅ‡∏•‡∏∞ Elvis operator (?:)
// ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô convertCelsiusToFahrenheit() ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: return
// celsius
// üö®

//üö®    val fahrenheitResult = celsiusToFahrenheit(celsius)

// 6. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
// ‡πÉ‡∏ä‡πâ String format ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
//üö®    println("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: $celsius ¬∞C ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö ${"%.2f".format(fahrenheitResult)} ¬∞F")


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á Kilometers to Miles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

// --- ‡πÅ‡∏õ‡∏•‡∏á Kilometers ‚ûî Miles ---

// 5. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Null Safety ‡∏î‡πâ‡∏ß‡∏¢ toDoubleOrNull() ‡πÅ‡∏•‡∏∞ Elvis operator (?:)
// ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô convertKilometersToMiles() ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: return
// kilometers
// üö®


//üö®    val milesResult = kilometersToMiles(kilometers)

// 6. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
//üö®    println("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: $kilometers km ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö ${"%.2f".format(milesResult)} miles")

fun convertKilometersToMiles() {
    print("‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£ (Kilometers):  ")
    val km = readln().toDoubleOrNull() ?: run {
        println("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        return
    }

    val result = kilometersToMiles(km) //
    println("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: $km km = ${"%.2f".format(result)} miles") //
}